// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PluginPigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PluginPigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PluginPigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ArithmeticOperation: Int {
  case add = 0
  case subtract = 1
  case multiply = 2
  case divide = 3
}

private class PluginPigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ArithmeticOperation(rawValue: enumResultAsInt)
      }
      return nil
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PluginPigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ArithmeticOperation {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class PluginPigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PluginPigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PluginPigeonPigeonCodecWriter(data: data)
  }
}

class PluginPigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PluginPigeonPigeonCodec(readerWriter: PluginPigeonPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ArithmeticHostApi {
  func performArithmeticOperation(input1: Double, input2: Double, operation: ArithmeticOperation) throws -> Double
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ArithmeticHostApiSetup {
  static var codec: FlutterStandardMessageCodec { PluginPigeonPigeonCodec.shared }
  /// Sets up an instance of `ArithmeticHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ArithmeticHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let performArithmeticOperationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.plugin_workshop.ArithmeticHostApi.performArithmeticOperation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      performArithmeticOperationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let input1Arg = args[0] as! Double
        let input2Arg = args[1] as! Double
        let operationArg = args[2] as! ArithmeticOperation
        do {
          let result = try api.performArithmeticOperation(input1: input1Arg, input2: input2Arg, operation: operationArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      performArithmeticOperationChannel.setMessageHandler(nil)
    }
  }
}
